generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Users {
  userId     Int      @id @default(autoincrement()) @map("userId")
  email      String   @unique @map("email")
  password   String   @map("password")
  createdAt  DateTime @default(now()) @map("createdAt")
  updatedAt  DateTime @updatedAt @map("updatedAt")

  userInfos UserInfos?
  resume Resume[]

  @@map("Users")
}

model UserInfos {
  userInfoId   Int      @id @default(autoincrement()) @map("userInfoId")
  UserId       Int      @unique @map("UserId") // 사용자(Users) 테이블을 참조하는 외래키
  name        String     @map("name")
	role        String     @map("role")
  createdAt    DateTime @default(now()) @map("createdAt")
  updatedAt    DateTime @updatedAt @map("updatedAt")

  // Users 테이블과 관계를 설정합니다.
  user Users @relation(fields: [UserId], references: [userId], onDelete: Cascade)
  resume Resume[]

  @@map("UserInfos")
}

model Resume {
  resumeId     Int      @id @default(autoincrement()) @map("resumeId")
  UserId       Int      @map("UserId") // 사용자(Users), 테이블을 참조하는 외래키
  title        String     @map("title")
	aboutMe      String     @map("aboutMe")
  support      String     @map("support")
  createdAt    DateTime @default(now()) @map("createdAt")
  updatedAt    DateTime @updatedAt @map("updatedAt")

  // Users 테이블과 관계를 설정합니다.
  user Users @relation(fields: [UserId], references: [userId], onDelete: Cascade, map: "Resume_User_fkey")
  userInfos UserInfos @relation(fields: [UserId], references: [UserId], map: "Resume_UserInfos_fkey")

  @@map("Resume")
}